/* 
 * Copyright (C) 2017 V12 Technology Limited
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.fluxtion.visualiser;

import com.fluxtion.visualiser.extensions.audit.EventLog;
import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;
import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.awt.MenuItem;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.stream.Collectors;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.FontUIResource;


/**
 * Main frame that Loads, displays and exports to PNG graphml files generated by
 * Fluxtion.
 *
 * @author Greg Higgins (greg.higgins@V12technology.com)
 */
public class VisualiserAppFrame extends javax.swing.JFrame {

    private final Preferences prefs;
    private File selectedFile;
    private static final String RECENTFILE_KEY = "recentFiles";
    private GraphVisualiserPanel panel;
    private EventBus eventBus;
    private final FileDrop fileDrop;

    /**
     * Creates new form SepVisualiaserFrame
     */
    public VisualiserAppFrame() {
        initComponents();

        fileDrop = new FileDrop(jPanel1, true, (java.io.File[] files) -> {
            System.out.println("drop:" + Arrays.toString(files));
            if (files.length > 0) {
                selectedFile = files[0];
                loadSelectedGraphMlFile();
            }

        });

        prefs = Preferences.userRoot().node(this.getClass().getName());
        String filesRecent = prefs.get(RECENTFILE_KEY, null);
        if (filesRecent != null) {
            Arrays.stream(filesRecent.split("\\|")).map((s) -> s.trim()).distinct().forEach((s) -> {
                recentMenu.add(new RecentMenuItem(s));
            });
        }
        eventBus = new EventBus();
        eventBus.register(this);
        eventPanel1.setEventBus(eventBus);
    }

    @Subscribe
    public void selectedAuditRecord(EventLog.AuditRecord record) {
        System.out.println("received:" + record);
        panel.highlightCellOnly(record.getNodeId());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        btnZoomIn = new javax.swing.JButton();
        btnZoomOut = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        btnOnlyFiltered = new javax.swing.JButton();
        btnShowAll = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        eventPanel1 = new com.fluxtion.visualiser.extensions.audit.EventPanel();
        jPanel2 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuOpen = new javax.swing.JMenuItem();
        recentMenu = new javax.swing.JMenu();
        clearRecentMenu = new javax.swing.JMenuItem();
        menuExport = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        collapseFoldMenu = new javax.swing.JMenuItem();
        expandFoldMenu = new javax.swing.JMenuItem();
        menuReload = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        menuIncreaseFont = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fluxtion visualiser");

        jPanel1.setLayout(new java.awt.BorderLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        btnZoomIn.setText("zoom in");
        btnZoomIn.setFocusable(false);
        btnZoomIn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnZoomIn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomInActionPerformed(evt);
            }
        });
        jToolBar1.add(btnZoomIn);

        btnZoomOut.setText("zoom out");
        btnZoomOut.setFocusable(false);
        btnZoomOut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnZoomOut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnZoomOutActionPerformed(evt);
            }
        });
        jToolBar1.add(btnZoomOut);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("    search filter:");
        jToolBar1.add(jLabel1);

        jTextField1.setColumns(20);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jTextField1);

        btnOnlyFiltered.setText("filtered");
        btnOnlyFiltered.setFocusable(false);
        btnOnlyFiltered.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOnlyFiltered.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnOnlyFiltered.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOnlyFilteredActionPerformed(evt);
            }
        });
        jToolBar1.add(btnOnlyFiltered);

        btnShowAll.setText("show all");
        btnShowAll.setFocusable(false);
        btnShowAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnShowAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowAllActionPerformed(evt);
            }
        });
        jToolBar1.add(btnShowAll);

        jPanel1.add(jToolBar1, java.awt.BorderLayout.NORTH);

        jSplitPane1.setDividerLocation(750);
        jSplitPane1.setResizeWeight(0.9);

        jTabbedPane1.setMaximumSize(new java.awt.Dimension(250, 32767));
        jTabbedPane1.addTab("Event log", eventPanel1);

        jSplitPane1.setRightComponent(jTabbedPane1);
        jSplitPane1.setLeftComponent(jPanel2);

        jPanel1.add(jSplitPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        menuOpen.setText("open");
        menuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(menuOpen);

        recentMenu.setText("open recent");
        jMenu1.add(recentMenu);

        clearRecentMenu.setText("clear recent");
        clearRecentMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearRecentMenuActionPerformed(evt);
            }
        });
        jMenu1.add(clearRecentMenu);

        menuExport.setText("export");
        menuExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExportActionPerformed(evt);
            }
        });
        jMenu1.add(menuExport);
        jMenu1.add(jSeparator1);

        menuExit.setText("exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        jMenu1.add(menuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Graph");

        collapseFoldMenu.setText("show only filtered");
        collapseFoldMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collapseFoldMenuActionPerformed(evt);
            }
        });
        jMenu2.add(collapseFoldMenu);

        expandFoldMenu.setText("show all");
        expandFoldMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expandFoldMenuActionPerformed(evt);
            }
        });
        jMenu2.add(expandFoldMenu);

        menuReload.setText("reload from file");
        menuReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuReloadActionPerformed(evt);
            }
        });
        jMenu2.add(menuReload);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("settings");

        menuIncreaseFont.setText("increase font");
        menuIncreaseFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuIncreaseFontActionPerformed(evt);
            }
        });
        jMenu3.add(menuIncreaseFont);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        setSize(new java.awt.Dimension(1099, 852));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void menuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a .graphml file to load");
        fileChooser.setFileFilter(
                new FileNameExtensionFilter("Graph ml (.graphml)", "graphml"));
        if (selectedFile != null) {
            fileChooser.setCurrentDirectory(selectedFile);
        } else {
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        }
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();
            loadSelectedGraphMlFile();
//            pack();
//            setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_menuOpenActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuExitActionPerformed

    private void menuReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuReloadActionPerformed
        loadSelectedGraphMlFile();
    }//GEN-LAST:event_menuReloadActionPerformed

    private void menuExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExportActionPerformed
        if (panel == null) {
            return;
        }
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a png file to export");
        fileChooser.setFileFilter(
                new FileNameExtensionFilter("Potable network graphics (.png)", "png"));
        if (selectedFile != null) {
            fileChooser.setCurrentDirectory(selectedFile);
        } else {
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        }
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File pngFile = fileChooser.getSelectedFile();
            panel.exportPng(pngFile);
        }
    }//GEN-LAST:event_menuExportActionPerformed

    private void expandFoldMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expandFoldMenuActionPerformed
//        panel.foldCells(false);
        List<String> selectedIds = panel.selectedIds();
        loadSelectedGraphMlFile();
        panel.selectCellsById(selectedIds);
    }//GEN-LAST:event_expandFoldMenuActionPerformed

    private void collapseFoldMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collapseFoldMenuActionPerformed
        panel.foldCells(true);
    }//GEN-LAST:event_collapseFoldMenuActionPerformed

    private void clearRecentMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearRecentMenuActionPerformed
        try {
            prefs.clear();
            recentMenu.removeAll();
        } catch (BackingStoreException ex) {
            Logger.getLogger(VisualiserAppFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clearRecentMenuActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
        String id = jTextField1.getText();
        loadSelectedGraphMlFile();
        if (id == null || id.isEmpty()) {
            return;
        }
        panel.selectCellsBySearchString(id);
        panel.foldCells(true);
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void btnZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomInActionPerformed
        panel.zoom(true);
    }//GEN-LAST:event_btnZoomInActionPerformed

    public static void inceaseFontSize(boolean increase) {
        int delta = increase ? 2 : -2;
        Enumeration keys = UIManager.getDefaults().keys();
        while (keys.hasMoreElements()) {
            Object key = keys.nextElement();
            Object value = UIManager.get(key);
            if (value instanceof FontUIResource) {
                FontUIResource orig = (FontUIResource) value;
                Font font = new Font(orig.getFontName(), orig.getStyle(), (orig.getSize() + delta));
                System.out.println("new font size:" + font.getSize());
//                Font font = new Font(f.getFontName(), orig.getStyle(), f.getSize());
                UIManager.put(key, new FontUIResource(font));
            }
        }
    }
    private Map<String, Font> originals;
    private float scale;

    public void changeFont(Component component, int fontSize) {
        Font f = component.getFont();
        component.setFont(new Font(f.getName(), f.getStyle(), f.getSize() + fontSize));
        if (component instanceof Container) {
            for (Component child : ((Container) component).getComponents()) {
                changeFont(child, fontSize);
            }
        }
        if (component instanceof JMenu) {


            for (Component child : ((JMenu) component).getMenuComponents()) {
                changeFont(child, fontSize);
            }
        }
    }

    public void setFontScale(float scale) {

        if (originals == null) {
            originals = new HashMap<>(25);
            for (Map.Entry entry : UIManager.getDefaults().entrySet()) {
                Object key = entry.getKey();
                System.out.println(key.toString().toLowerCase());
                if (key.toString().toLowerCase().contains(".font")) {
                    Object value = entry.getValue();
                    Font font = null;
//                    if (value instanceof SwingLazyValue) {
//                        SwingLazyValue lazy = (SwingLazyValue) entry.getValue();
//                        value = lazy.createValue(UIManager.getDefaults());
//                    }

                    if (value instanceof Font) {
                        font = (Font) value;
                        originals.put(key.toString(), font);
                    }
                }
            }
        }

        for (Map.Entry<String, Font> entry : originals.entrySet()) {
            String key = entry.getKey();
            Font font = entry.getValue();

            float size = font.getSize();
            size *= scale;
            System.out.println("new size:" + size);
            font = font.deriveFont(Font.PLAIN, size);
            UIManager.put(key, font);
        }

        SwingUtilities.updateComponentTreeUI(this);
//        updateUI();
        revalidate();
        repaint();

        
        
    }


    private void btnZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnZoomOutActionPerformed
        panel.zoom(false);
    }//GEN-LAST:event_btnZoomOutActionPerformed

    private void btnOnlyFilteredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOnlyFilteredActionPerformed
        panel.foldCells(true);
    }//GEN-LAST:event_btnOnlyFilteredActionPerformed

    private void btnShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowAllActionPerformed
        List<String> selectedIds = panel.selectedIds();
        loadSelectedGraphMlFile();
        panel.selectCellsById(selectedIds);
    }//GEN-LAST:event_btnShowAllActionPerformed

    private void menuIncreaseFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuIncreaseFontActionPerformed
        scale += 1f;
//        setFontScale(scale);

        

        changeFont(this, 5);
        SwingUtilities.updateComponentTreeUI(this);
        jPanel1.updateUI();
        jMenuBar1.updateUI();
        revalidate();
        repaint();
    }//GEN-LAST:event_menuIncreaseFontActionPerformed

    public void loadFile(File file){
         selectedFile = file;
        loadSelectedGraphMlFile();
    }

    private void loadSelectedGraphMlFile() {
        panel = new GraphVisualiserPanel();
        panel.load(selectedFile);

        //add keyboard listener
        panel.addReloadAction(new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loadSelectedGraphMlFile();
            }
        });

        jSplitPane1.setLeftComponent(panel);
        panel.requestFocus();
        revalidate();
        String filesRecent = prefs.get(RECENTFILE_KEY, null);

        new FileDrop(panel, true, (java.io.File[] files) -> {
            System.out.println("drop:" + Arrays.toString(files));
            if (files.length > 0) {
                selectedFile = files[0];
                loadSelectedGraphMlFile();
            }

        });

        try {
            if (filesRecent == null) {
                prefs.put(RECENTFILE_KEY, selectedFile.getCanonicalPath());
            } else {
                final String canonicalPath = selectedFile.getCanonicalPath();
                boolean noMatch = !Arrays.stream(filesRecent.split("\\|")).map((s) -> s.trim()).anyMatch((t) -> {
                    return t.equalsIgnoreCase(canonicalPath);
                });

                if (noMatch) {
                    recentMenu.add(new RecentMenuItem(canonicalPath));
                    filesRecent += "|" + selectedFile.getCanonicalPath();
                    filesRecent = Arrays.stream(filesRecent.split("\\|")).map((s) -> s.trim())
                            .distinct()
                            .collect(Collectors.joining("|"));
                    prefs.put(RECENTFILE_KEY, filesRecent);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(VisualiserAppFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void display() {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                setLocationRelativeTo(null);
                setVisible(true);
            }
        });
    }

    private class RecentMenuItem extends JMenuItem {

        private File file;

        public RecentMenuItem(String text) {
            super();
            file = new File(text);
            if (!file.exists()) {
                return;
            }
            String fileName = file.getName();
            setAction(new AbstractAction(fileName) {
                @Override
                public void actionPerformed(ActionEvent e) {
                    selectedFile = file;
                    loadSelectedGraphMlFile();
                }
            });
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOnlyFiltered;
    private javax.swing.JButton btnShowAll;
    private javax.swing.JButton btnZoomIn;
    private javax.swing.JButton btnZoomOut;
    private javax.swing.JMenuItem clearRecentMenu;
    private javax.swing.JMenuItem collapseFoldMenu;
    private com.fluxtion.visualiser.extensions.audit.EventPanel eventPanel1;
    private javax.swing.JMenuItem expandFoldMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenuItem menuExport;
    private javax.swing.JMenuItem menuIncreaseFont;
    private javax.swing.JMenuItem menuOpen;
    private javax.swing.JMenuItem menuReload;
    private javax.swing.JMenu recentMenu;
    // End of variables declaration//GEN-END:variables
}
