/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fluxtion.visualiser;

import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.BackingStoreException;
import java.util.prefs.Preferences;
import java.util.stream.Collectors;
import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * Main frame that Loads, displays and exports to PNG graphml files generated by
 * Fluxtion.
 *
 * @author Greg Higgins (greg.higgins@V12technology.com)
 */
public class VisualiserAppFrame extends javax.swing.JFrame {

    private Preferences prefs;
    private File selectedFile;
    private static final String RECENTFILE_KEY = "recentFiles";
    private GraphVisualiserPanel panel;

    /**
     * Creates new form SepVisualiaserFrame
     */
    public VisualiserAppFrame() {
        initComponents();
        System.out.println("completed initComponents()");
        prefs = Preferences.userRoot().node(this.getClass().getName());
        String filesRecent = prefs.get(RECENTFILE_KEY, null);
        if (filesRecent != null) {
            Arrays.stream(filesRecent.split("\\|")).map((s) -> s.trim()).distinct().forEach((s) -> {
                recentMenu.add(new RecentMenuItem(s));
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuOpen = new javax.swing.JMenuItem();
        recentMenu = new javax.swing.JMenu();
        clearRecentMenu = new javax.swing.JMenuItem();
        menuExport = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        collapseFoldMenu = new javax.swing.JMenuItem();
        expandFoldMenu = new javax.swing.JMenuItem();
        menuReload = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fluxtion visualiser");

        jMenu1.setText("File");

        menuOpen.setText("open");
        menuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(menuOpen);

        recentMenu.setText("open recent");
        jMenu1.add(recentMenu);

        clearRecentMenu.setText("clear recent");
        clearRecentMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearRecentMenuActionPerformed(evt);
            }
        });
        jMenu1.add(clearRecentMenu);

        menuExport.setText("export");
        menuExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExportActionPerformed(evt);
            }
        });
        jMenu1.add(menuExport);
        jMenu1.add(jSeparator1);

        menuExit.setText("exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        jMenu1.add(menuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Graph");

        collapseFoldMenu.setText("show only filtered");
        collapseFoldMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                collapseFoldMenuActionPerformed(evt);
            }
        });
        jMenu2.add(collapseFoldMenu);

        expandFoldMenu.setText("show all");
        expandFoldMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expandFoldMenuActionPerformed(evt);
            }
        });
        jMenu2.add(expandFoldMenu);

        menuReload.setText("reload from file");
        menuReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuReloadActionPerformed(evt);
            }
        });
        jMenu2.add(menuReload);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        setSize(new java.awt.Dimension(418, 347));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void menuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a .graphml file to load");
        fileChooser.setFileFilter(
                new FileNameExtensionFilter("Graph ml (.graphml)", "graphml"));
        if (selectedFile != null) {
            fileChooser.setCurrentDirectory(selectedFile);
        } else {
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        }
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();
            loadSelectedGraphMlFile();
            pack();
            setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_menuOpenActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuExitActionPerformed

    private void menuReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuReloadActionPerformed
        loadSelectedGraphMlFile();
    }//GEN-LAST:event_menuReloadActionPerformed

    private void menuExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExportActionPerformed
        if (panel == null) {
            return;
        }
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a png file to export");
        fileChooser.setFileFilter(
                new FileNameExtensionFilter("Potable network graphics (.png)", "png"));
        if (selectedFile != null) {
            fileChooser.setCurrentDirectory(selectedFile);
        } else {
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        }
        int result = fileChooser.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File pngFile = fileChooser.getSelectedFile();
            panel.exportPng(pngFile);
        }
    }//GEN-LAST:event_menuExportActionPerformed

    private void expandFoldMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expandFoldMenuActionPerformed
//        panel.foldCells(false);
        List<String> selectedIds = panel.selectedIds();
        loadSelectedGraphMlFile();
        panel.selectCellsById(selectedIds);
    }//GEN-LAST:event_expandFoldMenuActionPerformed

    private void collapseFoldMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_collapseFoldMenuActionPerformed
        panel.foldCells(true);
    }//GEN-LAST:event_collapseFoldMenuActionPerformed

    private void clearRecentMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearRecentMenuActionPerformed
        try {
            prefs.clear();
            recentMenu.removeAll();
        } catch (BackingStoreException ex) {
            Logger.getLogger(VisualiserAppFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clearRecentMenuActionPerformed

    private void loadSelectedGraphMlFile() {
        getContentPane().removeAll();
        panel = new GraphVisualiserPanel();
        panel.load(selectedFile);
        getContentPane().add(panel);
        revalidate();
        String filesRecent = prefs.get(RECENTFILE_KEY, null);
        try {
            if (filesRecent == null) {
                prefs.put(RECENTFILE_KEY, selectedFile.getCanonicalPath());
            } else {
                final String canonicalPath = selectedFile.getCanonicalPath();
                boolean noMatch = !Arrays.stream(filesRecent.split("\\|")).map((s) -> s.trim()).anyMatch((t) -> {
                    return t.equalsIgnoreCase(canonicalPath);
                });

                if (noMatch) {
                    recentMenu.add(new RecentMenuItem(canonicalPath));
                    filesRecent += "|" + selectedFile.getCanonicalPath();
                    filesRecent = Arrays.stream(filesRecent.split("\\|")).map((s) -> s.trim())
                            .distinct()
                            .collect(Collectors.joining("|"));
                    prefs.put(RECENTFILE_KEY, filesRecent);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(VisualiserAppFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public void display() {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                setLocationRelativeTo(null);
                setVisible(true);
            }
        });
    }

    private class RecentMenuItem extends JMenuItem {

        private File file;

        public RecentMenuItem(String text) {
            super();
            file = new File(text);
            if (!file.exists()) {
                return;
            }
            String fileName = file.getName();
            setAction(new AbstractAction(fileName) {
                @Override
                public void actionPerformed(ActionEvent e) {
                    selectedFile = file;
                    loadSelectedGraphMlFile();
                }
            });
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem clearRecentMenu;
    private javax.swing.JMenuItem collapseFoldMenu;
    private javax.swing.JMenuItem expandFoldMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenuItem menuExport;
    private javax.swing.JMenuItem menuOpen;
    private javax.swing.JMenuItem menuReload;
    private javax.swing.JMenu recentMenu;
    // End of variables declaration//GEN-END:variables
}
