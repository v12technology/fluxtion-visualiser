/*
 * Copyright (C) 2017 Greg Higgins (greg.higgins@V12technology.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.fluxtion.visualiser.extensions.audit;

import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.LongAdder;
import java.util.stream.Collectors;

/**
 * Parses log records from a map structure as generated by a yaml generator. See
 *
 * @see com.rbccm.fx.dto.log.LogRecord for an example of generating yaml in the
 * required form.
 *
 * @author Greg Higgins (greg.higgins@V12technology.com)
 */
public class EventLog {

    private Map map;
    private List<AuditRecord> auditList;
    private List<String> nodeNameList;

    public EventLog(Map map) {
        setMap(map);
    }

    public final void setMap(Map map) {
        this.map = map;
        auditList = null;
        nodeNameList = null;
    }

    public long getLogTime() {
        return (long) map.get("logTime");
    }

    public String getGroupingId() {
        return (String) map.get("groupingId");
    }

    public String getEventType() {
        return (String) map.get("event");
    }

    public List< Map> nodeLogs() {
        return (List< Map>) map.get("nodeLogs");
    }

    public List< AuditRecord> auditLogs() {
        if (auditList == null) {
            LongAdder accumulator = new LongAdder();
            auditList = ((List< Map>) map.get("nodeLogs")).stream().map(m -> {
                Map.Entry entry = (Map.Entry) m.entrySet().iterator().next();
                final AuditRecord auditRecord = new AuditRecord(entry, accumulator.intValue());
                accumulator.increment();
                return auditRecord;
            }).collect(Collectors.toList());
        }
        return auditList;
    }

    public List<String> nodeNames() {
        if (nodeNameList == null) {
            nodeNameList = (List<String>) nodeLogs()
                    .stream()
                    .flatMap(f -> f.keySet().stream())
                    .map(k -> (String) k)
                    .distinct()
                    .collect(Collectors.toList());
        }
        return nodeNameList;
    }

    public int logCount() {
        return nodeLogs().size();
    }

    @Override
    public String toString() {
        return "EventLog{"
                + "logTime=" + getLogTime()
                + ", groupingId=" + getGroupingId()
                + ", event=" + getEventType()
                + ", logCount=" + logCount()
                + ", auditLogs=" + auditLogs()
                + ", nodeLogs=" + nodeLogs()
                + ", nodeNames=" + nodeNames()
                + '}';
    }

    public static class AuditRecord {

        private final String nodeId;
        private final Map propertyMap;
        private final int sequenceNumber;

        public AuditRecord(Map.Entry entry, int sequenceNumber) {
            this.nodeId = (String) entry.getKey();
            this.propertyMap = (Map) entry.getValue();
            this.sequenceNumber = sequenceNumber;
        }

        public String nodeId() {
            return nodeId;
        }

        public Map propertyMap() {
            return propertyMap;
        }

        public int sequenceNumber() {
            return sequenceNumber;
        }

        @Override
        public String toString() {
            return "AuditRecord{"
                    + "nodeId=" + nodeId
                    + ", sequenceNumber=" + sequenceNumber
                    + ", propertyMap=" + propertyMap
                    + '}';
        }

    }


}
